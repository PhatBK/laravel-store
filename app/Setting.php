<?php

namespace App;

use Eloquent;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Carbon;
use App\Mail\SettingNotification;
use Mail;

/**
 * App\Setting
 *
 * @property int $id
 * @property string $name
 * @property string $name_group
 * @property string $display_name
 * @property string $description
 * @property string $slug
 * @property string $group
 * @property string $type
 * @property string $permissible_values
 * @property string|null $value
 * @property int|null $edited_by_user_id
 * @property Carbon|null $created_at
 * @property Carbon|null $updated_at
 * @method static Builder|Setting newModelQuery()
 * @method static Builder|Setting newQuery()
 * @method static Builder|Setting query()
 * @method static Builder|Setting whereCreatedAt($value)
 * @method static Builder|Setting whereDescription($value)
 * @method static Builder|Setting whereDisplayName($value)
 * @method static Builder|Setting whereEditedByUserId($value)
 * @method static Builder|Setting whereGroup($value)
 * @method static Builder|Setting whereId($value)
 * @method static Builder|Setting whereName($value)
 * @method static Builder|Setting whereNameGroup($value)
 * @method static Builder|Setting wherePermissibleValues($value)
 * @method static Builder|Setting whereSlug($value)
 * @method static Builder|Setting whereType($value)
 * @method static Builder|Setting whereUpdatedAt($value)
 * @method static Builder|Setting whereValue($value)
 * @mixin Eloquent
 */
class Setting extends Model
{
    protected $guarded = [];
    private string $event_type = '';

    /**
     * set setCreator from auth user
     *
     * @return  Setting $setting
     */
    public function setEditor(): self
    {
        $this->edited_by_user_id = auth()->user()->id;
        return $this;
    }

    /**
     * Overwrite the configuration file config/settings.php with data from the database
     *
     * @return $this $setting
     */
    public function writeConfig(): self
    {
        $settings = self::get();
        if ($settings->count()) {
            $path = __DIR__ . '/../config/settings.php';
            info($path);
            $fp = fopen($path, 'w'); // @todo 'b' is missing
            fwrite($fp, "<?php\n\n// this file is automatically generated in '" . __METHOD__ . "!' \n\nreturn [\n\n");

            foreach ($settings as $setting_) {
                fwrite($fp, "\t'$setting_->name' => '$setting_->value', // $setting_->display_name\n");
            }

            fwrite($fp, "\n];");
            fclose($fp);
        }
        return $this;
    }

    /**
     * Create records in table events.
     *
     * @return $this $setting
     */
    public function createCustomevent(): self
    {
        $this->event_type = debug_backtrace()[1]['function'];
        $attr = $this->getAttributes();
        $dirty = $this->getDirty();
        $original = $this->getOriginal();

        $details = [];
        foreach ($attr as $property => $value) {
            if (array_key_exists($property, $dirty) or !$dirty) {
                $details[] = [
                    $property,
                    $original[$property] ?? FALSE,
                    $dirty[$property] ?? FALSE,
                ];
            }
        }

        Customevent::create([
            'user_id' => auth()->user()->id,
            'model' => $this->getTable(),
            'model_id' => $this->id,
            'model_name' => $this->name,
            'type' => $this->event_type,
            'description' => $this->event_description ?? FALSE,
            'details' => serialize($details) ?? '',
        ]);
        return $this;
    }

    /**
     * Create event notification.
     *
     * @return $this $setting
     */
    public function sendEmailNotification(): self
    {
        $namesetting = 'settings.email_' . $this->getTable() . '_' . $this->event_type;
        $setting = config($namesetting);
        info(__METHOD__ . ' ' . $namesetting . ' = ' . $setting);

        if ( $setting === '1' ) {
            $to = auth()->user();

            $bcc = array_merge(config('mail.mail_bcc'), explode(', ', config('settigs.additional_email_bcc')));
            $bcc = array_diff($bcc, ['', auth()->user() ? auth()->user()->email : '', config('mail.email_send_delay')]);
            $bcc = array_unique($bcc);

            Mail::to($to)->bcc($bcc)->later(
                Carbon::now()->addMinutes(config('mail.email_send_delay')),
                new SettingNotification($this->getTable(), $this->id, $this->name, auth()->user()->name, $this->event_type)
            );

            // restarting the queue to make sure they are started
            if (!empty(config('custom.exec_queue_work'))) {
                info(__METHOD__ . ': ' . exec(config('custom.exec_queue_work')));
            }
        }
        return $this;
    }

    /**
     * @return $this
     */
    public function setFlashMess(): self
    {
        $message = __('Setting__success', ['name' => $this->name, 'type_act' => __('feminine_' . $this->event_type)]);
        session()->flash('message', $message);
        return $this;
    }
}
